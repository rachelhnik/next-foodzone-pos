generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addon_categories {
  id                     Int                      @id @default(autoincrement())
  name                   String
  is_required            Boolean                  @default(false)
  menu_addons menu_addons[]
}

model addons {
  id                     Int                      @id(map: "add_ons_pkey") @default(autoincrement())
  name                   String
  
  addon_categories_id    Int?
  branches_addons        branches_addons[]
  menu_addons menu_addons[]
}

model branches {
  id              Int               @id @default(autoincrement())
  township_id     Int
  company_id      Int
  address         String
  companies       companies         @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  townships       townships         @relation(fields: [township_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  branches_addons branches_addons[]
  branches_menucategories_menus branches_menucategories_menus[]
}

model branches_addons {
  id           Int      @id @default(autoincrement())
  addon_id     Int
  branch_id    Int
  is_available Boolean? @default(true)
  addons       addons   @relation(fields: [addon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  branches     branches @relation(fields: [branch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model branches_menucategories_menus {
  id           Int     @id(map: "location_menus_pkey") @default(autoincrement())
  menu_id      Int?
  branch_id    Int
  menucategory_id Int
  is_available_menu Boolean @default(true)
  is_available_menucategory Boolean @default(true)
  menus        menus?   @relation(fields: [menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "location_menus_menu_id_fkey")
  menu_categories    menu_categories @relation(fields: [menucategory_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  branches   branches @relation(fields: [branch_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id       Int        @id @default(autoincrement())
  name     String
  branches branches[]
  users    users[]
}

model menu_categories {
  id                    Int                     @id(map: "menu_category_pkey") @default(autoincrement())
  name                  String
  branches_menucategories_menus branches_menucategories_menus[]
}

model menus {
  id                     Int                      @id @default(autoincrement())
  name                   String
  price                  Int
 
  asset_url              String?
  description            String?
  branches_menucategories_menus         branches_menucategories_menus[]
  menus_addoncats_addons menu_addons[]
  
}

model menu_addons {
  id                 Int             @id @default(autoincrement())
 menu  menus @relation(fields: [menu_id], references: [id])
 menu_id Int
 addon addons @relation(fields: [addon_id],references: [id])
 addon_id Int
 price  Int
 addon_categories addon_categories[]

}



model townships {
  id       Int        @id @default(autoincrement())
  name     String
  branches branches[]
}

model users {
  id         Int       @id @default(autoincrement())
  name       String
  email      String
  password   String
  company_id Int
  companies  companies @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role Role
}

enum Role {
  admin 
  manager
}
